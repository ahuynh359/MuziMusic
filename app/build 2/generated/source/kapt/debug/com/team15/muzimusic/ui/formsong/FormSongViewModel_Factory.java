// Generated by Dagger (https://dagger.dev).
package com.team15.muzimusic.ui.formsong;

import com.team15.muzimusic.data.repositories.AccountRepository;
import com.team15.muzimusic.data.repositories.AlbumRepository;
import com.team15.muzimusic.data.repositories.SongRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class FormSongViewModel_Factory implements Factory<FormSongViewModel> {
  private final Provider<SongRepository> songRepositoryProvider;

  private final Provider<AlbumRepository> albumRepositoryProvider;

  private final Provider<AccountRepository> accountRepositoryProvider;

  public FormSongViewModel_Factory(Provider<SongRepository> songRepositoryProvider,
      Provider<AlbumRepository> albumRepositoryProvider,
      Provider<AccountRepository> accountRepositoryProvider) {
    this.songRepositoryProvider = songRepositoryProvider;
    this.albumRepositoryProvider = albumRepositoryProvider;
    this.accountRepositoryProvider = accountRepositoryProvider;
  }

  @Override
  public FormSongViewModel get() {
    return newInstance(songRepositoryProvider.get(), albumRepositoryProvider.get(), accountRepositoryProvider.get());
  }

  public static FormSongViewModel_Factory create(Provider<SongRepository> songRepositoryProvider,
      Provider<AlbumRepository> albumRepositoryProvider,
      Provider<AccountRepository> accountRepositoryProvider) {
    return new FormSongViewModel_Factory(songRepositoryProvider, albumRepositoryProvider, accountRepositoryProvider);
  }

  public static FormSongViewModel newInstance(SongRepository songRepository,
      AlbumRepository albumRepository, AccountRepository accountRepository) {
    return new FormSongViewModel(songRepository, albumRepository, accountRepository);
  }
}
