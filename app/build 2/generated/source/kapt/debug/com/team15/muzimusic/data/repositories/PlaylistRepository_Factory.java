// Generated by Dagger (https://dagger.dev).
package com.team15.muzimusic.data.repositories;

import com.team15.muzimusic.data.services.playlist.PlaylistRemoteService;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import kotlinx.coroutines.CoroutineDispatcher;

@ScopeMetadata
@QualifierMetadata("com.team15.muzimusic.di.IoDispatcher")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class PlaylistRepository_Factory implements Factory<PlaylistRepository> {
  private final Provider<PlaylistRemoteService> remoteServiceProvider;

  private final Provider<CoroutineDispatcher> dispatcherProvider;

  public PlaylistRepository_Factory(Provider<PlaylistRemoteService> remoteServiceProvider,
      Provider<CoroutineDispatcher> dispatcherProvider) {
    this.remoteServiceProvider = remoteServiceProvider;
    this.dispatcherProvider = dispatcherProvider;
  }

  @Override
  public PlaylistRepository get() {
    return newInstance(remoteServiceProvider.get(), dispatcherProvider.get());
  }

  public static PlaylistRepository_Factory create(
      Provider<PlaylistRemoteService> remoteServiceProvider,
      Provider<CoroutineDispatcher> dispatcherProvider) {
    return new PlaylistRepository_Factory(remoteServiceProvider, dispatcherProvider);
  }

  public static PlaylistRepository newInstance(PlaylistRemoteService remoteService,
      CoroutineDispatcher dispatcher) {
    return new PlaylistRepository(remoteService, dispatcher);
  }
}
