// Generated by Dagger (https://dagger.dev).
package com.team15.muzimusic.data.repositories;

import com.team15.muzimusic.data.services.search_history.SearchHistoryLocalService;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import kotlinx.coroutines.CoroutineDispatcher;

@ScopeMetadata
@QualifierMetadata("com.team15.muzimusic.di.IoDispatcher")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class SearchHistoryRepository_Factory implements Factory<SearchHistoryRepository> {
  private final Provider<SearchHistoryLocalService> localServiceProvider;

  private final Provider<CoroutineDispatcher> dispatcherProvider;

  public SearchHistoryRepository_Factory(Provider<SearchHistoryLocalService> localServiceProvider,
      Provider<CoroutineDispatcher> dispatcherProvider) {
    this.localServiceProvider = localServiceProvider;
    this.dispatcherProvider = dispatcherProvider;
  }

  @Override
  public SearchHistoryRepository get() {
    return newInstance(localServiceProvider.get(), dispatcherProvider.get());
  }

  public static SearchHistoryRepository_Factory create(
      Provider<SearchHistoryLocalService> localServiceProvider,
      Provider<CoroutineDispatcher> dispatcherProvider) {
    return new SearchHistoryRepository_Factory(localServiceProvider, dispatcherProvider);
  }

  public static SearchHistoryRepository newInstance(SearchHistoryLocalService localService,
      CoroutineDispatcher dispatcher) {
    return new SearchHistoryRepository(localService, dispatcher);
  }
}
