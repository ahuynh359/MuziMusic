// Generated by Dagger (https://dagger.dev).
package com.team15.muzimusic.di;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import okhttp3.Interceptor;
import okhttp3.OkHttpClient;
import okhttp3.logging.HttpLoggingInterceptor;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetworkModule_ProvideOKHttpClientFactory implements Factory<OkHttpClient> {
  private final Provider<HttpLoggingInterceptor> httpLoggingInterceptorProvider;

  private final Provider<Interceptor> authInterceptorProvider;

  public NetworkModule_ProvideOKHttpClientFactory(
      Provider<HttpLoggingInterceptor> httpLoggingInterceptorProvider,
      Provider<Interceptor> authInterceptorProvider) {
    this.httpLoggingInterceptorProvider = httpLoggingInterceptorProvider;
    this.authInterceptorProvider = authInterceptorProvider;
  }

  @Override
  public OkHttpClient get() {
    return provideOKHttpClient(httpLoggingInterceptorProvider.get(), authInterceptorProvider.get());
  }

  public static NetworkModule_ProvideOKHttpClientFactory create(
      Provider<HttpLoggingInterceptor> httpLoggingInterceptorProvider,
      Provider<Interceptor> authInterceptorProvider) {
    return new NetworkModule_ProvideOKHttpClientFactory(httpLoggingInterceptorProvider, authInterceptorProvider);
  }

  public static OkHttpClient provideOKHttpClient(HttpLoggingInterceptor httpLoggingInterceptor,
      Interceptor authInterceptor) {
    return Preconditions.checkNotNullFromProvides(NetworkModule.INSTANCE.provideOKHttpClient(httpLoggingInterceptor, authInterceptor));
  }
}
