// Generated by Dagger (https://dagger.dev).
package com.team15.muzimusic.ui.notification;

import com.team15.muzimusic.data.repositories.AccountRepository;
import com.team15.muzimusic.data.repositories.CommentRepository;
import com.team15.muzimusic.data.repositories.NotificationRepository;
import com.team15.muzimusic.data.repositories.SongRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NotificationViewModel_Factory implements Factory<NotificationViewModel> {
  private final Provider<NotificationRepository> notificationRepositoryProvider;

  private final Provider<SongRepository> songRepositoryProvider;

  private final Provider<CommentRepository> commentRepositoryProvider;

  private final Provider<AccountRepository> accountRepositoryProvider;

  public NotificationViewModel_Factory(
      Provider<NotificationRepository> notificationRepositoryProvider,
      Provider<SongRepository> songRepositoryProvider,
      Provider<CommentRepository> commentRepositoryProvider,
      Provider<AccountRepository> accountRepositoryProvider) {
    this.notificationRepositoryProvider = notificationRepositoryProvider;
    this.songRepositoryProvider = songRepositoryProvider;
    this.commentRepositoryProvider = commentRepositoryProvider;
    this.accountRepositoryProvider = accountRepositoryProvider;
  }

  @Override
  public NotificationViewModel get() {
    return newInstance(notificationRepositoryProvider.get(), songRepositoryProvider.get(), commentRepositoryProvider.get(), accountRepositoryProvider.get());
  }

  public static NotificationViewModel_Factory create(
      Provider<NotificationRepository> notificationRepositoryProvider,
      Provider<SongRepository> songRepositoryProvider,
      Provider<CommentRepository> commentRepositoryProvider,
      Provider<AccountRepository> accountRepositoryProvider) {
    return new NotificationViewModel_Factory(notificationRepositoryProvider, songRepositoryProvider, commentRepositoryProvider, accountRepositoryProvider);
  }

  public static NotificationViewModel newInstance(NotificationRepository notificationRepository,
      SongRepository songRepository, CommentRepository commentRepository,
      AccountRepository accountRepository) {
    return new NotificationViewModel(notificationRepository, songRepository, commentRepository, accountRepository);
  }
}
