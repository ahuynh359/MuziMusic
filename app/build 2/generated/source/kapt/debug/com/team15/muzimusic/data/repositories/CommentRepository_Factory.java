// Generated by Dagger (https://dagger.dev).
package com.team15.muzimusic.data.repositories;

import com.team15.muzimusic.data.services.comment.CommentRemoteService;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import kotlinx.coroutines.CoroutineDispatcher;

@ScopeMetadata
@QualifierMetadata("com.team15.muzimusic.di.IoDispatcher")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class CommentRepository_Factory implements Factory<CommentRepository> {
  private final Provider<CommentRemoteService> remoteServiceProvider;

  private final Provider<CoroutineDispatcher> dispatcherProvider;

  public CommentRepository_Factory(Provider<CommentRemoteService> remoteServiceProvider,
      Provider<CoroutineDispatcher> dispatcherProvider) {
    this.remoteServiceProvider = remoteServiceProvider;
    this.dispatcherProvider = dispatcherProvider;
  }

  @Override
  public CommentRepository get() {
    return newInstance(remoteServiceProvider.get(), dispatcherProvider.get());
  }

  public static CommentRepository_Factory create(
      Provider<CommentRemoteService> remoteServiceProvider,
      Provider<CoroutineDispatcher> dispatcherProvider) {
    return new CommentRepository_Factory(remoteServiceProvider, dispatcherProvider);
  }

  public static CommentRepository newInstance(CommentRemoteService remoteService,
      CoroutineDispatcher dispatcher) {
    return new CommentRepository(remoteService, dispatcher);
  }
}
