// Generated by Dagger (https://dagger.dev).
package com.team15.muzimusic.ui.home.home;

import com.team15.muzimusic.data.repositories.AccountRepository;
import com.team15.muzimusic.data.repositories.PlaylistRepository;
import com.team15.muzimusic.data.repositories.SongRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DiscoverViewModel_Factory implements Factory<DiscoverViewModel> {
  private final Provider<SongRepository> songRepositoryProvider;

  private final Provider<PlaylistRepository> playlistRepositoryProvider;

  private final Provider<AccountRepository> accountRepositoryProvider;

  public DiscoverViewModel_Factory(Provider<SongRepository> songRepositoryProvider,
      Provider<PlaylistRepository> playlistRepositoryProvider,
      Provider<AccountRepository> accountRepositoryProvider) {
    this.songRepositoryProvider = songRepositoryProvider;
    this.playlistRepositoryProvider = playlistRepositoryProvider;
    this.accountRepositoryProvider = accountRepositoryProvider;
  }

  @Override
  public DiscoverViewModel get() {
    return newInstance(songRepositoryProvider.get(), playlistRepositoryProvider.get(), accountRepositoryProvider.get());
  }

  public static DiscoverViewModel_Factory create(Provider<SongRepository> songRepositoryProvider,
      Provider<PlaylistRepository> playlistRepositoryProvider,
      Provider<AccountRepository> accountRepositoryProvider) {
    return new DiscoverViewModel_Factory(songRepositoryProvider, playlistRepositoryProvider, accountRepositoryProvider);
  }

  public static DiscoverViewModel newInstance(SongRepository songRepository,
      PlaylistRepository playlistRepository, AccountRepository accountRepository) {
    return new DiscoverViewModel(songRepository, playlistRepository, accountRepository);
  }
}
