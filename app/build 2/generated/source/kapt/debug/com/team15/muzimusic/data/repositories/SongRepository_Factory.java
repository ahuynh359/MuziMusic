// Generated by Dagger (https://dagger.dev).
package com.team15.muzimusic.data.repositories;

import com.team15.muzimusic.data.services.account.AccountLocalService;
import com.team15.muzimusic.data.services.song.SongLocalService;
import com.team15.muzimusic.data.services.song.SongRemoteService;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import kotlinx.coroutines.CoroutineDispatcher;

@ScopeMetadata
@QualifierMetadata("com.team15.muzimusic.di.IoDispatcher")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class SongRepository_Factory implements Factory<SongRepository> {
  private final Provider<SongLocalService> songLocalServiceProvider;

  private final Provider<SongRemoteService> songRemoteServiceProvider;

  private final Provider<AccountLocalService> accountLocalServiceProvider;

  private final Provider<CoroutineDispatcher> dispatcherProvider;

  public SongRepository_Factory(Provider<SongLocalService> songLocalServiceProvider,
      Provider<SongRemoteService> songRemoteServiceProvider,
      Provider<AccountLocalService> accountLocalServiceProvider,
      Provider<CoroutineDispatcher> dispatcherProvider) {
    this.songLocalServiceProvider = songLocalServiceProvider;
    this.songRemoteServiceProvider = songRemoteServiceProvider;
    this.accountLocalServiceProvider = accountLocalServiceProvider;
    this.dispatcherProvider = dispatcherProvider;
  }

  @Override
  public SongRepository get() {
    return newInstance(songLocalServiceProvider.get(), songRemoteServiceProvider.get(), accountLocalServiceProvider.get(), dispatcherProvider.get());
  }

  public static SongRepository_Factory create(Provider<SongLocalService> songLocalServiceProvider,
      Provider<SongRemoteService> songRemoteServiceProvider,
      Provider<AccountLocalService> accountLocalServiceProvider,
      Provider<CoroutineDispatcher> dispatcherProvider) {
    return new SongRepository_Factory(songLocalServiceProvider, songRemoteServiceProvider, accountLocalServiceProvider, dispatcherProvider);
  }

  public static SongRepository newInstance(SongLocalService songLocalService,
      SongRemoteService songRemoteService, AccountLocalService accountLocalService,
      CoroutineDispatcher dispatcher) {
    return new SongRepository(songLocalService, songRemoteService, accountLocalService, dispatcher);
  }
}
