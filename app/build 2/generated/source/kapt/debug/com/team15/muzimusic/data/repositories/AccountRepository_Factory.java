// Generated by Dagger (https://dagger.dev).
package com.team15.muzimusic.data.repositories;

import com.team15.muzimusic.data.services.account.AccountRemoteService;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import kotlinx.coroutines.CoroutineDispatcher;

@ScopeMetadata
@QualifierMetadata("com.team15.muzimusic.di.IoDispatcher")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AccountRepository_Factory implements Factory<AccountRepository> {
  private final Provider<AccountRemoteService> accountRemoteServiceProvider;

  private final Provider<CoroutineDispatcher> dispatcherProvider;

  public AccountRepository_Factory(Provider<AccountRemoteService> accountRemoteServiceProvider,
      Provider<CoroutineDispatcher> dispatcherProvider) {
    this.accountRemoteServiceProvider = accountRemoteServiceProvider;
    this.dispatcherProvider = dispatcherProvider;
  }

  @Override
  public AccountRepository get() {
    return newInstance(accountRemoteServiceProvider.get(), dispatcherProvider.get());
  }

  public static AccountRepository_Factory create(
      Provider<AccountRemoteService> accountRemoteServiceProvider,
      Provider<CoroutineDispatcher> dispatcherProvider) {
    return new AccountRepository_Factory(accountRemoteServiceProvider, dispatcherProvider);
  }

  public static AccountRepository newInstance(AccountRemoteService accountRemoteService,
      CoroutineDispatcher dispatcher) {
    return new AccountRepository(accountRemoteService, dispatcher);
  }
}
