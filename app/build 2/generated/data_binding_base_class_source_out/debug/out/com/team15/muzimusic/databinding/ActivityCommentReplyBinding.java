// Generated by view binder compiler. Do not edit!
package com.team15.muzimusic.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.cardview.widget.CardView;
import androidx.recyclerview.widget.RecyclerView;
import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.team15.muzimusic.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityCommentReplyBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final ImageView btnCancel;

  @NonNull
  public final ImageView btnSendComment;

  @NonNull
  public final CardView cardView;

  @NonNull
  public final EditText edComment;

  @NonNull
  public final ImageView imgUser;

  @NonNull
  public final LinearLayout layoutBottom;

  @NonNull
  public final LinearLayout layoutDetail;

  @NonNull
  public final ItemCommentBinding parentComment;

  @NonNull
  public final RecyclerView recyclerReply;

  @NonNull
  public final SwipeRefreshLayout swipeRefresh;

  @NonNull
  public final Toolbar toolbar;

  private ActivityCommentReplyBinding(@NonNull RelativeLayout rootView,
      @NonNull ImageView btnCancel, @NonNull ImageView btnSendComment, @NonNull CardView cardView,
      @NonNull EditText edComment, @NonNull ImageView imgUser, @NonNull LinearLayout layoutBottom,
      @NonNull LinearLayout layoutDetail, @NonNull ItemCommentBinding parentComment,
      @NonNull RecyclerView recyclerReply, @NonNull SwipeRefreshLayout swipeRefresh,
      @NonNull Toolbar toolbar) {
    this.rootView = rootView;
    this.btnCancel = btnCancel;
    this.btnSendComment = btnSendComment;
    this.cardView = cardView;
    this.edComment = edComment;
    this.imgUser = imgUser;
    this.layoutBottom = layoutBottom;
    this.layoutDetail = layoutDetail;
    this.parentComment = parentComment;
    this.recyclerReply = recyclerReply;
    this.swipeRefresh = swipeRefresh;
    this.toolbar = toolbar;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityCommentReplyBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityCommentReplyBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_comment_reply, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityCommentReplyBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnCancel;
      ImageView btnCancel = ViewBindings.findChildViewById(rootView, id);
      if (btnCancel == null) {
        break missingId;
      }

      id = R.id.btnSendComment;
      ImageView btnSendComment = ViewBindings.findChildViewById(rootView, id);
      if (btnSendComment == null) {
        break missingId;
      }

      id = R.id.cardView;
      CardView cardView = ViewBindings.findChildViewById(rootView, id);
      if (cardView == null) {
        break missingId;
      }

      id = R.id.edComment;
      EditText edComment = ViewBindings.findChildViewById(rootView, id);
      if (edComment == null) {
        break missingId;
      }

      id = R.id.imgUser;
      ImageView imgUser = ViewBindings.findChildViewById(rootView, id);
      if (imgUser == null) {
        break missingId;
      }

      id = R.id.layoutBottom;
      LinearLayout layoutBottom = ViewBindings.findChildViewById(rootView, id);
      if (layoutBottom == null) {
        break missingId;
      }

      id = R.id.layoutDetail;
      LinearLayout layoutDetail = ViewBindings.findChildViewById(rootView, id);
      if (layoutDetail == null) {
        break missingId;
      }

      id = R.id.parentComment;
      View parentComment = ViewBindings.findChildViewById(rootView, id);
      if (parentComment == null) {
        break missingId;
      }
      ItemCommentBinding binding_parentComment = ItemCommentBinding.bind(parentComment);

      id = R.id.recyclerReply;
      RecyclerView recyclerReply = ViewBindings.findChildViewById(rootView, id);
      if (recyclerReply == null) {
        break missingId;
      }

      id = R.id.swipeRefresh;
      SwipeRefreshLayout swipeRefresh = ViewBindings.findChildViewById(rootView, id);
      if (swipeRefresh == null) {
        break missingId;
      }

      id = R.id.toolbar;
      Toolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      return new ActivityCommentReplyBinding((RelativeLayout) rootView, btnCancel, btnSendComment,
          cardView, edComment, imgUser, layoutBottom, layoutDetail, binding_parentComment,
          recyclerReply, swipeRefresh, toolbar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
