// Generated by view binder compiler. Do not edit!
package com.team15.muzimusic.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatEditText;
import androidx.appcompat.widget.AppCompatImageButton;
import androidx.appcompat.widget.AppCompatTextView;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.team15.muzimusic.R;
import de.hdodenhof.circleimageview.CircleImageView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ToolbarBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final AppCompatEditText edtSearch;

  @NonNull
  public final CircleImageView imvAvatar;

  @NonNull
  public final AppCompatImageButton imvNoti;

  @NonNull
  public final AppCompatTextView tvCount;

  private ToolbarBinding(@NonNull ConstraintLayout rootView, @NonNull AppCompatEditText edtSearch,
      @NonNull CircleImageView imvAvatar, @NonNull AppCompatImageButton imvNoti,
      @NonNull AppCompatTextView tvCount) {
    this.rootView = rootView;
    this.edtSearch = edtSearch;
    this.imvAvatar = imvAvatar;
    this.imvNoti = imvNoti;
    this.tvCount = tvCount;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ToolbarBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ToolbarBinding inflate(@NonNull LayoutInflater inflater, @Nullable ViewGroup parent,
      boolean attachToParent) {
    View root = inflater.inflate(R.layout.toolbar, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ToolbarBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.edt_search;
      AppCompatEditText edtSearch = ViewBindings.findChildViewById(rootView, id);
      if (edtSearch == null) {
        break missingId;
      }

      id = R.id.imv_avatar;
      CircleImageView imvAvatar = ViewBindings.findChildViewById(rootView, id);
      if (imvAvatar == null) {
        break missingId;
      }

      id = R.id.imv_noti;
      AppCompatImageButton imvNoti = ViewBindings.findChildViewById(rootView, id);
      if (imvNoti == null) {
        break missingId;
      }

      id = R.id.tv_count;
      AppCompatTextView tvCount = ViewBindings.findChildViewById(rootView, id);
      if (tvCount == null) {
        break missingId;
      }

      return new ToolbarBinding((ConstraintLayout) rootView, edtSearch, imvAvatar, imvNoti,
          tvCount);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
